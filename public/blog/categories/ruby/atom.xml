<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Vagmi's Blog]]></title>
  <link href="http://vagmim.in/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://vagmim.in/"/>
  <updated>2012-12-18T23:56:05+05:30</updated>
  <id>http://vagmim.in/</id>
  <author>
    <name><![CDATA[Vagmi Mudumbai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Logarithm to any base in ruby]]></title>
    <link href="http://vagmim.in/blog/2010/01/25/logarithm-to-any-base-in-ruby/"/>
    <updated>2010-01-25T00:00:00+05:30</updated>
    <id>http://vagmim.in/blog/2010/01/25/logarithm-to-any-base-in-ruby</id>
    <content type="html"><![CDATA[<div class='post'>
Ruby's Math module includes functions for a natural log (log to the base e) and the common log (log to the base 10). If you have to have a log to an arbitrary base, you have to write your own. Doing so is trivial.<br /><br /><script src="http://gist.github.com/285744.js?file=log_base.rb"></script><br /><br />I will probably explain the theory behind this another day.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markov Chains]]></title>
    <link href="http://vagmim.in/blog/2009/12/23/markov-chains/"/>
    <updated>2009-12-23T00:00:00+05:30</updated>
    <id>http://vagmim.in/blog/2009/12/23/markov-chains</id>
    <content type="html"><![CDATA[<div class='post'>
You know developers have an itch to implement something cool that they learned about. No can say it better than XKCD.<br /><br /><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://xkcd.com/208/"><img style="cursor:pointer; cursor:hand;width: 600px; height: 607px;" src="http://imgs.xkcd.com/comics/regular_expressions.png" border="0" alt="" /></a><br /><br />I learnt about <a href="http://en.wikipedia.org/wiki/Markov_chain">Markov Chains</a> today. <br /><br /><blockquote>In mathematics, a Markov chain, named after Andrey Markov, is a discrete random process with the Markov property. A discrete random process means a system which can be in various states, and which changes randomly in discrete steps. It can be helpful to think of the system as evolving once a minute, although strictly speaking the "step" may have nothing to do with time. The Markov property states that the probability distribution for the system at the next step (and in fact at all future steps) only depends on the current state of the system, and not additionally on the state of the system at previous steps. Since the system changes randomly, it is generally impossible to predict the exact state of the system in the future. However, the statistical properties of the system at a great many steps in the future can often be described. In many applications it is these statistical properties that are important. - From the wikipedia entry on <a href="http://en.wikipedia.org/wiki/Markov_chain">Markov Chains</a></blockquote><br /><br />It was so cool that I decided to do something with it. So I wrote a simple helper that generates articles for the app that I was testing. Here is the code in all its glory. It is not the fastest piece of code and is a memory hog, but who cares? <br /><br /><script src="http://gist.github.com/262529.js?file=markov.rb"></script><br /><br />This is how you use it.<br /><br /><script src="http://gist.github.com/262529.js?file=usage.rb"></script><br /><br />And this produced this <a href="http://gist.github.com/raw/262529/f53ad246a37eed108c98f05e6f3327355dff7df5/article.txt">fine article</a>. Isn't this cool?</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Observer Pattern using Ruby Meta- Voodoo]]></title>
    <link href="http://vagmim.in/blog/2007/01/14/observer-pattern-using-ruby-meta-voodoo/"/>
    <updated>2007-01-14T00:00:00+05:30</updated>
    <id>http://vagmim.in/blog/2007/01/14/observer-pattern-using-ruby-meta-voodoo</id>
    <content type="html"><![CDATA[<div class='post'>
The <a href="http://www.ruby-doc.org/stdlib/">ruby standard library</a> already has an <a href="http://www.rubycentral.com/book/lib_patterns.html">implementation</a> for the <a href="http://en.wikipedia.org/wiki/Observer_pattern">observer pattern</a>. The implementation of the pattern was not very rubyish. It seemed a direct implementation of the Java equivalent of it. Ruby is far more powerful.  This is the more rubyish version of the of the code goes something like this.<br /><br /><blockquote><br />require 'observerext'<br /><br />class Person<br />include Observer #include the observer related methods<br />observable :name,:address # the metavoodoo to create the accessor methods and fire events<br />end<br /><br /><br />admin=Person.new<br />admin.name='vagmi'<br />admin.address='admin@somesite.com'<br /><br /># first observer<br />admin.observe :name do |old,newvalue|<br />puts %{The administrator changed from #{old} to #{newvalue}}<br />end<br /><br /># the second observer<br />admin.observe :name do |old,newvalue|<br />  puts 'there can be multiple observers'<br />end<br /><br />admin.name='root'<br />#this prints the following statements<br /># > The administrator has changed from vagmi to root<br /># > there can be multiple observers</blockquote><br /><br />You can find the code for observerext.rb <a href="http://vagmi.googlecode.com/svn/trunk/observer/observerext.rb">here</a>. What I have basically done is to extend the Module class, which defines the observable method. The observable method injects the attributes' getters and setters. The setter method notifies the observers if there are any. The Observer module does the leg work of registering and unregistering the blocks and the notifyobservers method.<br /><br /><span style="font-weight: bold;">Update:</span> Forgot to credit <a href="http://ghouston.blogspot.com/">Greg Houston</a> for <a href="http://ghouston.blogspot.com/2006/05/attraccessor-meta-programming.html">explaining</a> some of the ruby voodoo.</div>

]]></content>
  </entry>
  
</feed>
